/*
    Implements linear search
    O(n)
*/

public static int linearSearch(Object[] array, targetObject) {
    int targetIndex = -1;

    for(int i = 0; i < array.length; i++){
        if(array[i].compareTo(targetObject))
            targetIndex = i;
    }

    return targetIndex;
}

/*
    An optimization of linear search
*/

public static int modifiedLinearSearch(int[] array, targetInt) {
    int targetIndex = -1;

    for(int i = 0; i < array.length; i++){
        if(targetInt < array[i]) {
            return(-1);
        }

        if(array[i].equals(targetInt))
            targetIndex = i;
    }
    return targetIndex;
}

/*
    Bubble sort
*/

public static void bubbleSort(Object[] array){
   int k = 0;
   boolean swapOccured = true;

   while ((k < array.length() - 1) && swapOccured){
      swapOccured = false;
      k++;

      for (int j = 0; j < array.length() - k; j++)
         if (array[j].compareTo(array[j + 1]) > 0) {
            int temp = array[j];
            array[j] = array[j + 1];
            array[j + 1] = temp;
            swap(array, j, j + 1);
            swapOccured = true;
         }
	}
}
